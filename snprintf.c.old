
//const int DEFAULT_PRECISION = 18;
//
//const int PARSE_CODE_OK = 1;
//const int PARSE_CODE_INCOMPLETE = 0;
//const int PARSE_CODE_ERROR = -1;
//
//const int BUFFER_SIZE = 2048;
//const double EPS = 0.000000005;
//
//int parse_for_flags(const char* argb){
//    const int len = strlen(argb);
//    char flag = 0;
//    if (len > 0 && ('-' == argb[0] ||
//                '+' == argb[0] ||
//                ' ' == argb[0] ||
//                '0' == argb[0] ||
//                '#' == argb[0])){
//        flag = argb[0];
//    }
//    return flag;
//}
//
//char* parse_for_width(const char* argb, char* container){
//    const int len = strlen(argb);
//    if (len > 0){
//        int width = 0;
//        int i;
//        for (i = 0; i < len && isdigit(argb[i]); ++i);
//        if (i > 0)
//            strncpy(container, argb, i);
//    }
//    return container;
//}
//
//char* parse_for_precision(const char* argb, char* container){
//    const int len = strlen(argb);
//    if ('.' == argb[0]){
//       int precision = 0;
//       int i;
//       for (i = 1; i < len && isdigit(argb[i]); ++i);
//       strncpy(container, argb, i);
//    }
//    return container;
//}
//
//char parse_for_type(const char* argb){
//    const int len = strlen(argb);
//    char type = 0;
//    if (len > 0 && ('d' == argb[0] ||
//                'i' == argb[0] ||
//                'f' == argb[0] ||
//                'c' == argb[0] ||
//                's' == argb[0])){
//        type = argb[0];
//    } else if (len > 0){
//        type = 127;
//    }
//    return type;
//}

//TODO: check gcvt function
//int parse(const char* argb, char* flag, int* width,
//        int* precision, char* type){
//    const int len = strlen(argb);
//
//    int offset = 1;
//
//    *flag = parse_for_flags(argb + offset);
//    if (*flag > 0)
//        offset++;
//
//    *width = 0;
//    char* buffer = calloc(BUFFER_SIZE, sizeof(char));
//
//    buffer = parse_for_width(argb + offset, buffer);
//    if (strlen(buffer)){
//        *width = atoi(buffer);
//        offset += strlen(buffer);
//    }
//    buffer[0] = 0;
//
//    *precision = 0;
//    buffer = parse_for_precision(argb + offset, buffer);
//    if (strlen(buffer)){
//        *precision = atoi(buffer + 1);
//        offset += strlen(buffer);
//    }
//
//    free(buffer);
//
//    *type = parse_for_type(argb + offset);
//    if (*type > 0 && *type < 127)
//        return PARSE_CODE_OK;
//    if (*type == 127)
//        return PARSE_CODE_ERROR;
//    return PARSE_CODE_INCOMPLETE;
//}
//
//char* from_args(char* to, va_list args, char flag,
//        int width, int precision, char type){
//    switch (type){
//        case 'd':
//            break;
//        case 'i':
//            break;
//        case 'f':
//            break;
//        case 'c':
//            break;
//        case 's':
//            break;
//    }
//    return to;
//}

//int my_snprintf(char * s, size_t n, const char * format, ...){
//    s[0] = 0; //clear string
//
//    va_list args;
//    va_start(args, format);
//    char argb[BUFFER_SIZE] = {0};
//    char appendable[BUFFER_SIZE] = {0};
//
//    char flag = 0;
//    int width = 0;
//    int precision = 0;
//    char type = 0;
//    for (int i = 0; i < strlen(format) && n > 0; ++i){
//        if ('%' == format[i] || strlen(argb)){
//            appendable[0] = format[i];
//            strcat(argb, appendable);
//            if (strlen(argb) > 1){
//                int parse_res = parse(argb, &flag, &width, &precision, &type);
//                switch(parse_res){
//                    case PARSE_CODE_OK: {
//                            char buffer[BUFFER_SIZE] = {0}, *tmp;
//                            tmp = buffer;
//                            switch (type) {
//                                case 'd':
//                                case 'i':
//                                    gcvt(va_arg(args, int), BUFFER_SIZE, buffer);
//                                    break;
//                                case 'f':
//                                    {
//                                        double arg = va_arg(args, double);
//                                        gcvt((int) arg, BUFFER_SIZE, buffer);
//
//                                        double afterPoint = arg - (int) arg;
//                                        char afterPointBuffer[DEFAULT_PRECISION + 1] = {0};
//                                        strcat(afterPointBuffer, ".");
//                                        if (precision > 0){
//                                            gcvt(afterPoint, precision, afterPointBuffer);
//                                        } else {
//                                            gcvt(afterPoint, DEFAULT_PRECISION, afterPointBuffer);
//                                        }
//                                        strcat(buffer, afterPointBuffer + 1);
//                                    }
//                                    break;
//                                case 'c':
//                                    buffer[0] = va_arg(args, int);
//                                    break;
//                                case 's':
//                                    //tmp = va_arg(args, char*);
//                                    strcat(buffer, va_arg(args, char*));
//                                    break;
//                            }
//                            if (width > 0){
//                                char spaces[BUFFER_SIZE];
//                                for (int i = 0; i < width - strlen(buffer); ++i)
//                                    spaces[i] = ' ';
//                                strcpy(buffer, spaces);
//                            }
//                            strncat(s, buffer, n);
//                            n -= strlen(buffer);
//                            argb[0] = 0;
//
//                            // width, precision
//                            // fillChar = ' ', '0'
//                            //
//                        }
//                        break;
//                    case PARSE_CODE_INCOMPLETE:
//                        break;
//                    case PARSE_CODE_ERROR:
//                        strncat(s, argb, n);
//                        n -= strlen(argb);
//                        argb[0] = 0;
//                        break;
//                    default:
//                        break;
//                }
//            }
//        } else {
//            appendable[0] = format[i];
//            strncat(s, appendable, n);
//            n--;
//        }
//    }
//
//    return 0;
//}

